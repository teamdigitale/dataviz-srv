replicaCount: 1

image:
  repository: ghcr.io/teamdigitale/dataviz-srv
  tag: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  enabled: true
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  enabled: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 3003
  targetPort: 3003
  annotations: {}

ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: dataviz.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: dataviz-tls
      hosts:
        - dataviz.example.com

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

livenessProbe:
  enabled: true
  httpGet:
    path: /api/health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /api/ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

startupProbe:
  enabled: true
  httpGet:
    path: /api/startup
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

nodeSelector: {}
tolerations: []
affinity: {}

podDisruptionBudget:
  enabled: true
  minAvailable: 1

networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
  egress:
    enabled: true
    to:
    - {}  # Allow all egress by default

env:
  NODE_ENV: production
  PORT: "3003"
  LOG_LEVEL: info

# Database configuration
postgresql:
  enabled: true
  auth:
    username: dataviz
    database: dataviz
    existingSecret: ""
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
  primary:
    persistence:
      enabled: true
      storageClass: ""
      size: 20Gi
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    configuration: |
      max_connections = 100
      shared_buffers = 32MB
      effective_cache_size = 128MB
  backup:
    enabled: false

# External database (when postgresql.enabled = false)
externalDatabase:
  host: ""
  port: 5432
  username: dataviz
  database: dataviz
  existingSecret: ""
  existingSecretPasswordKey: password

# Application secrets
secrets:
  JWT_SECRET: ""
  RESEND_API_KEY: ""
  OPENAI_API_KEY: ""
  existingSecret: ""

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  path: /api/metrics

# Migration job
migration:
  enabled: true
  image:
    repository: ghcr.io/teamdigitale/dataviz-srv
    tag: main
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi