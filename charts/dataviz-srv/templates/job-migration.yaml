{{- if .Values.migration.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "dataviz-srv.fullname" . }}-migration
  labels:
    {{- include "dataviz-srv.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "dataviz-srv.fullname" . }}-migration
      labels:
        {{- include "dataviz-srv.selectorLabels" . | nindent 8 }}
        job: migration
    spec:
      restartPolicy: Never
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-db
          image: postgres:15-alpine
          command: 
            - /bin/sh
            - -c
            - |
              {{- if .Values.postgresql.enabled }}
              until pg_isready -h {{ include "dataviz-srv.fullname" . }}-postgresql -p 5432 -U {{ .Values.postgresql.auth.username }}; do
              {{- else }}
              until pg_isready -h {{ .Values.externalDatabase.host }} -p {{ .Values.externalDatabase.port }} -U {{ .Values.externalDatabase.username }}; do
              {{- end }}
                echo "Waiting for database..."
                sleep 2
              done
              echo "Database is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.postgresql.enabled }}
                  name: {{ include "dataviz-srv.fullname" . }}-postgresql
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
                  {{- else }}
                  name: {{ .Values.externalDatabase.existingSecret | default (printf "%s-db" (include "dataviz-srv.fullname" .)) }}
                  key: {{ .Values.externalDatabase.existingSecretPasswordKey }}
                  {{- end }}
      containers:
        - name: migration
          image: "{{ .Values.migration.image.repository }}:{{ .Values.migration.image.tag | default .Chart.AppVersion }}"
          command: ["npx", "prisma", "migrate", "deploy"]
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.postgresql.enabled }}
                  name: {{ include "dataviz-srv.fullname" . }}-postgresql
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
                  {{- else }}
                  name: {{ .Values.externalDatabase.existingSecret | default (printf "%s-db" (include "dataviz-srv.fullname" .)) }}
                  key: {{ .Values.externalDatabase.existingSecretPasswordKey }}
                  {{- end }}
            - name: DATABASE_URL
              {{- if .Values.postgresql.enabled }}
              value: "postgresql://{{ .Values.postgresql.auth.username }}:$(DB_PASSWORD)@{{ include "dataviz-srv.fullname" . }}-postgresql:5432/{{ .Values.postgresql.auth.database }}"
              {{- else }}
              value: "postgresql://{{ .Values.externalDatabase.username }}:$(DB_PASSWORD)@{{ .Values.externalDatabase.host }}:{{ .Values.externalDatabase.port }}/{{ .Values.externalDatabase.database }}?sslmode=require"
              {{- end }}
          resources:
            {{- toYaml .Values.migration.resources | nindent 12 }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            {{- omit .Values.securityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
{{- end }}
